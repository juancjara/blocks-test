{"componentChunkName":"component---src-templates-block-js","path":"/blocks/taglines/content","result":{"data":{"block":{"id":"27e33bf0-271c-5459-8ce2-9670a7dc8a3a","displayName":"TaglineContent","src":"/** @jsx jsx */\nimport { jsx } from 'theme-ui'\nimport { ControlType, applyPropertyControls } from 'property-controls'\n\nconst TaglineContent = ({ textAlign = 'left', ...props }) => (\n  <section\n    sx={{\n      px: 2,\n      py: [3, 4, 5],\n      textAlign\n    }}\n    {...props}\n  />\n)\n\nTaglineContent.Container = props => (\n  <section\n    sx={{\n      maxWidth: 'container',\n      mx: 'auto'\n    }}\n    {...props}\n  />\n)\n\nTaglineContent.Heading = ({ children, ...props }) => (\n  <h3\n    sx={{\n      m: 0,\n      fontSize: [3, 4, 6],\n      lineHeight: 'heading',\n      fontWeight: 'heading'\n    }}\n    {...props}\n  >\n    {children}\n  </h3>\n)\n\nTaglineContent.Paragraph = props => (\n  <p\n    sx={{\n      mt: 0,\n      mb: 3,\n      fontSize: 3,\n      lineHeight: 'body',\n      fontWeight: 'body'\n    }}\n    {...props}\n  />\n)\n\napplyPropertyControls(TaglineContent, {\n  textAlign: {\n    type: ControlType.Enum,\n    options: ['left', 'center', 'right']\n  },\n  sx: {\n    type: ControlType.Style\n  }\n})\n\napplyPropertyControls(TaglineContent.Container, {\n  textAlign: {\n    type: ControlType.Enum,\n    options: ['left', 'center', 'right']\n  },\n  sx: {\n    type: ControlType.Style\n  }\n})\n\napplyPropertyControls(TaglineContent.Heading, {\n  as: {\n    title: 'Element Type',\n    type: ControlType.Enum,\n    options: ['p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6']\n  },\n  children: {\n    title: 'Text',\n    type: ControlType.String\n  },\n  sx: {\n    type: ControlType.Style\n  }\n})\n\napplyPropertyControls(TaglineContent.Paragraph, {\n  as: {\n    title: 'Element Type',\n    type: ControlType.Enum,\n    options: ['p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6']\n  },\n  children: {\n    title: 'Text',\n    type: ControlType.String\n  },\n  sx: {\n    type: ControlType.Style\n  }\n})\n\nTaglineContent.usage = `\n  <TaglineContent>\n    <TaglineContent.Container>\n      <TaglineContent.Heading>\n        What is a block?\n      </TaglineContent.Heading>\n      <TaglineContent.Paragraph>\n        A Block refers to a piece of content or a component.\n        It's a section of your content while a document is a\n        collection of blocks.\n      </TaglineContent.Paragraph>\n      <TaglineContent.Paragraph>\n        Blocks can be simple like a paragraph of text or even\n        a box with a tomato background color. Blocks can be\n        complex like an embedded spreadsheet or a chart that\n        fetches live data.\n      </TaglineContent.Paragraph>\n    </TaglineContent.Container>\n  </TaglineContent>\n`\n\nexport default TaglineContent\n","transformed":"const BLOCKS_Container = () => jsx(TaglineContent, null, jsx(TaglineContent.Container, null, jsx(TaglineContent.Heading, null, \"What is a block?\"), jsx(TaglineContent.Paragraph, null, \"A Block refers to a piece of content or a component. It's a section of your content while a document is a collection of blocks.\"), jsx(TaglineContent.Paragraph, null, \"Blocks can be simple like a paragraph of text or even a box with a tomato background color. Blocks can be complex like an embedded spreadsheet or a chart that fetches live data.\")));\n\nconst BLOCKS_Root = ({\n  children\n}) => {\n  return jsx(BLOCKS_Layout, null, jsx(BLOCKS_Droppable, {\n    droppableId: \"root\"\n  }, (provided, snapshot) => {\n    const allProps = Object.assign(provided.droppableProps, {\n      ref: provided.innerRef,\n      style: {\n        minHeight: '100%'\n      }\n    });\n    return React.createElement('div', allProps, children, provided.placeholder);\n  }));\n};"}},"pageContext":{"id":"27e33bf0-271c-5459-8ce2-9670a7dc8a3a","slug":"blocks/taglines/content"}}}